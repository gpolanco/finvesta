// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// === USER MANAGEMENT ===
// Local user model that syncs with Supabase auth.users
model User {
  id        String   @id @db.Uuid
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  profile      Profile?
  alerts       Alert[]

  @@map("users")
}

// Extended profile information
model Profile {
  id                    String   @id @db.Uuid
  userId                String   @unique @db.Uuid @map("user_id")
  monthlyIncome         Decimal  @default(3730.00) @map("monthly_income") @db.Decimal(10, 2)
  monthlySavingsTarget  Decimal  @default(1500.00) @map("monthly_savings_target") @db.Decimal(10, 2)
  maxCryptoPercentage   Decimal  @default(15.00) @map("max_crypto_percentage") @db.Decimal(5, 2)
  maxLiquidNoReturn     Decimal  @default(20000.00) @map("max_liquid_no_return") @db.Decimal(10, 2)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Account {
  id          String   @id @default(cuid())
  userId      String   @db.Uuid @map("user_id")
  name        String
  type        String   // bank, crypto, investment, cash, savings
  provider    String?
  balance     Decimal  @default(0) @db.Decimal(12, 2)
  currency    String   @default("EUR")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[] @relation("FromAccount")
  receivedTransfers Transaction[] @relation("ToAccount")

  @@map("accounts")
}

model Category {
  id          String   @id @default(cuid())
  userId      String   @db.Uuid @map("user_id")
  name        String
  type        String   // income, expense, investment, transfer
  parentId    String?  @map("parent_id")
  color       String   @default("#6b7280")
  isDefault   Boolean  @default(false) @map("is_default")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id              String   @id @default(cuid())
  userId          String   @db.Uuid @map("user_id")
  accountId       String   @map("account_id")
  categoryId      String?  @map("category_id")
  type            String   // income, expense, transfer, investment
  amount          Decimal  @db.Decimal(12, 2)
  description     String
  notes           String?
  transactionDate DateTime @default(now()) @map("transaction_date")
  toAccountId     String?  @map("to_account_id")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account   @relation("FromAccount", fields: [accountId], references: [id], onDelete: Cascade, map: "transactions_account_id_fkey")
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  toAccount   Account?  @relation("ToAccount", fields: [toAccountId], references: [id], map: "transactions_to_account_id_fkey")

  @@map("transactions")
}

model Alert {
  id              String   @id @default(cuid())
  userId          String   @db.Uuid @map("user_id")
  type            String   // critical, warning, info
  title           String
  message         String
  actionSuggested String?  @map("action_suggested")
  triggerValue    Decimal? @map("trigger_value") @db.Decimal(12, 2)
  isRead          Boolean  @default(false) @map("is_read")
  isDismissed     Boolean  @default(false) @map("is_dismissed")
  expiresAt       DateTime? @map("expires_at")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}
